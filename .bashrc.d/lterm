#!/bin/bash

# A function to (re)open a terminal window with a tmux session inside it.
#
# Usage: `lterm name location`, e. g. `lterm etc /etc`,
# or just `lterm name`.
# If the location is omitted,
# the target of a symlink in `~/.config/lterm/` (respecting `$XDG_CONFIG_HOME`) is used,
# e. g. `ln -s /etc ~/.config/lterm/etc` and then `lterm etc`.
#
# If the tmux session already exists, it is reattached,
# and if a terminal window is already attached to the session,
# that window is activated and brought to the foreground,
# so if you have a small library of lterm targets in ~/.config/lterm/,
# you can essentially always run `lterm name` to bring the terminal “name” up.
#
# Tab completion is available.

function lterm {
    local name=$1 location=$(term-location "$@")

    if tmux has-session -t "=$name" &>/dev/null; then
        if activate-window "$name:"; then
            # nothing more to do, except…
            if [[ $- == *i* ]] && ((${BASH_LINENO[-1]} == 1)); then
                # first command of an interactive shell:
                # assume this terminal was just started to launch the other terminal,
                # and now we may as well remove it
                exit
            fi
        else
            term tmux attach-session -t "=$name" -c "$location"
        fi
    else
        term tmux new-session -s "$name" -c "$location"
    fi
}

function _lterm {
    if [[ $COMP_CWORD == 1 ]]; then
        COMPREPLY=()
        for dir in "${XDG_CONFIG_HOME:-$HOME/.config}" ${XDG_CONFIG_DIRS:-/etc/xdg}; do
            for link in "$dir"/lterm/*; do
                if [[ -L $link ]]; then
                    name=${link##*/}
                    if [[ $name =~ ^"$2" ]]; then
                        COMPREPLY+=("$name")
                    fi
                fi
            done
        done
    fi
}

complete -o default -o filenames -F _lterm lterm
