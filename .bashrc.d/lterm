#!/bin/bash

# A function to (re)open a terminal window with a tmux session inside it.
#
# Usage: `lterm name location`, e. g. `lterm etc /etc`,
# or just `lterm name`.
# If the location is omitted,
# the target of a symlink in `~/.config/lterm/` (respecting `$XDG_CONFIG_HOME`) is used,
# e. g. `ln -s /etc ~/.config/lterm/etc` and then `lterm etc`.
#
# If the tmux session already exists, it is reattached,
# and if a terminal window is already attached to the session,
# that window is activated and brought to the foreground,
# so if you have a small library of lterm targets in ~/.config/lterm/,
# you can essentially always run `lterm name` to bring the terminal “name” up.
#
# Tab completion is available.

function lterm {
    local name=$1 location=$2
    if [[ -z $location ]]; then
        location=$HOME
        local IFS=:
        for dir in "${XDG_CONFIG_HOME:-$HOME/.config}" ${XDG_CONFIG_DIRS:-/etc/xdg}; do
            if [[ -L $dir/lterm/$name ]]; then
                location=$(readlink -- "$dir/lterm/$name")
                break
            fi
        done
    fi

    if tmux has-session -t "=$name" &>/dev/null; then
        if activate-window "^$name:"; then
            # nothing more to do, except…
            if ((BASH_LINENO == 1 && ${#BASH_SOURCE[@]} == 1)); then
                # first command of an interactive shell (BASH_SOURCE is just ~/.bashrc.d/lterm):
                # assume this terminal was just started to launch the other terminal,
                # and now we may as well remove it
                exit
            fi
        else
            term tmux attach-session -t "=$name" -c "$location"
        fi
    else
        term tmux new-session -s "$name" -c "$location"
    fi
}

function _lterm {
    if [[ $COMP_CWORD == 1 ]]; then
        COMPREPLY=()
        for dir in "${XDG_CONFIG_HOME:-$HOME/.config}" ${XDG_CONFIG_DIRS:-/etc/xdg}; do
            for link in "$dir"/lterm/*; do
                if [[ -L $link ]]; then
                    name=${link##*/}
                    if [[ $name =~ ^"$2" ]]; then
                        COMPREPLY+=("$name")
                    fi
                fi
            done
        done
    fi
}

complete -o default -o filenames -F _lterm lterm

# Attempt to activate a window with a title that matches the given pattern.
# The pattern is a POSIX Extended Regular Expression when using xdotool
# and an ECMAScript regular expression pattern when using GNOME Shell,
# though as far as I know the latter is a strict superset of the former.
# In both cases, the pattern is case-insensitive.
function activate-window {
    activate-window-gnome-shell "$1" || activate-window-xdotool "$1"
}

function activate-window-gnome-shell {
    busctl --user call org.gnome.Shell /org/gnome/Shell org.gnome.Shell Eval s '
        (function() {
            let found = false;
            for ( const actor of global.get_window_actors() ) {
                const window = actor.get_meta_window(),
                      title = window.get_title();
                if ( /'"${1//'/'/'\/'}"'/i.test( title ) ) {
                    window.activate( global.get_current_time() );
                    found = true;
                    break;
                }
            }
            return found;
        })();
    ' | (
        IFS=' ' read -r bs true result
        [[ $bs == bs ]] || { printf >&2 'dbus call org.gnome.Shell.Eval: expected return type bs but was %q\n' "$bs"; exit 1; }
        [[ $true == true ]] || { printf >&2 'dbus call org.gnome.Shell.Eval: expected success=true but was %q\nResult: %s\n' "$true" "$result"; exit 1; }
        [[ $result == '"true"' ]] || exit 1
    )
}

function activate-window-xdotool {
    xdotool search --name "$1" windowactivate &>/dev/null
}
